// import * as fs from "fs/promises";
// import * as readline from "readline";
// import * as path from "path";

// const filePath = path.join(
//   "D:/Learnings/JavaScript and Node JS and Ts/Practice/students_grade_calculator/db",
//   "tasks.json"
// );

// function getInput<T>(question: string, parser: (input: string) => T): Promise<T> {
//   const rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout,
//   });

//   return new Promise<T>((resolve) => {
//     rl.question(question, (answer) => {
//       rl.close();
//       resolve(parser(answer));
//     });
//   });
// }

// function averageCalculate(average: number): string {
//   if (average >= 90) return "Grade O";
//   else if (average >= 80) return "Grade A+";
//   else if (average >= 70) return "Grade A";
//   else if (average >= 60) return "Grade B+";
//   else if (average >= 50) return "Grade B";
//   else if (average >= 45) return "Grade C";
//   else return "Result Fail";
// }

// async function main() {
//   const name = await getInput<string>("Enter Your Name: ", (input) => input);
//   const Tamil = await getInput<number>("Enter Tamil Marks: ", Number);
//   const English = await getInput<number>("Enter English Marks: ", Number);
//   const Maths = await getInput<number>("Enter Maths Marks: ", Number);
//   const ComputerScience = await getInput<number>("Enter ComputerScience Marks: ", Number);
//   const Chemistry = await getInput<number>("Enter Chemistry Marks: ", Number);
//   const Physics = await getInput<number>("Enter Physics Marks: ", Number);

//   const marks: number[] = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
//   const total = marks.reduce((sum, mark) => sum + mark, 0);
//   const average = total / marks.length;
//   const grade = averageCalculate(average);

//   const studentData = {
//     name,
//     marks: { Tamil, English, Maths, ComputerScience, Chemistry, Physics },
//     total,
//     average: average.toFixed(2),
//     grade,
//   };

//   let tasks: any[] = [];
//   try {
//     const fileContent = await fs.readFile(filePath, "utf-8");
//     tasks = JSON.parse(fileContent);
//   } catch {
//     // File may not exist yet ‚Üí start with empty array
//     tasks = [];
//   }

//   tasks.push(studentData);
//   await fs.writeFile(filePath, JSON.stringify(tasks, null, 2));

//   console.log("\n‚úÖ Student data saved successfully:");
//   console.log(studentData);
// }

// main();


import * as fs from "fs/promises";
import * as readline from "readline";
import * as path from "path";

const filePath = path.join(
  "D:/Learnings/JavaScript and Node JS and Ts/Practice/students_grade_calculator/db",
  "tasks.json"
);

// Define Student type
interface Student {
  name: string;
  marks: {
    Tamil: number;
    English: number;
    Maths: number;
    ComputerScience: number;
    Chemistry: number;
    Physics: number;
  };
  total: number;
  average: string;
  grade: string;
}

// ---------- Utility Functions ----------
function getInput<T>(question: string, parser: (input: string) => T): Promise<T> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  return new Promise<T>((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(parser(answer));
    });
  });
}

function averageCalculate(average: number): string {
  if (average >= 90) return "Grade O";
  else if (average >= 80) return "Grade A+";
  else if (average >= 70) return "Grade A";
  else if (average >= 60) return "Grade B+";
  else if (average >= 50) return "Grade B";
  else if (average >= 45) return "Grade C";
  else return "Result Fail";
}

async function loadStudents(): Promise<Student[]> {
  try {
    const data = await fs.readFile(filePath, "utf-8");
    return JSON.parse(data);
  } catch {
    return [];
  }
}

async function saveStudents(students: Student[]): Promise<void> {
  await fs.writeFile(filePath, JSON.stringify(students, null, 2));
}

// ---------- Features ----------
async function addStudent() {
  const name = await getInput<string>("Enter Your Name: ", (input) => input);
  const Tamil = await getInput<number>("Enter Tamil Marks: ", Number);
  const English = await getInput<number>("Enter English Marks: ", Number);
  const Maths = await getInput<number>("Enter Maths Marks: ", Number);
  const ComputerScience = await getInput<number>("Enter ComputerScience Marks: ", Number);
  const Chemistry = await getInput<number>("Enter Chemistry Marks: ", Number);
  const Physics = await getInput<number>("Enter Physics Marks: ", Number);

  const marks = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
  const total = marks.reduce((sum, mark) => sum + mark, 0);
  const average = total / marks.length;
  const grade = averageCalculate(average);

  const student: Student = {
    name,
    marks: { Tamil, English, Maths, ComputerScience, Chemistry, Physics },
    total,
    average: average.toFixed(2),
    grade,
  };

  const students = await loadStudents();
  students.push(student);
  await saveStudents(students);

  console.log("\n‚úÖ Student data saved successfully:", student);
}

async function showStudents() {
  const students = await loadStudents();
  console.log("\nüìñ All Students Data:\n", JSON.stringify(students, null, 2));
}

async function updateStudent() {
  const students = await loadStudents();
  if (students.length === 0) {
    console.log("\n‚ö†Ô∏è No data found!");
    return;
  }

  const name = await getInput<string>("Enter the student name to update: ", (input) => input);
  const index = students.findIndex((s) => s.name.toLowerCase() === name.toLowerCase());

  if (index === -1) {
    console.log("\n‚ùå Student not found!");
    return;
  }

  console.log("\nEnter new marks (leave blank to keep old value):");

  const updateMarks = async (subject: keyof Student["marks"]): Promise<number> => {
    const input = await getInput<string>(`${subject} (${students[index].marks[subject]}): `, (x) => x);
    return input.trim() === "" ? students[index].marks[subject] : Number(input);
  };

  const Tamil = await updateMarks("Tamil");
  const English = await updateMarks("English");
  const Maths = await updateMarks("Maths");
  const ComputerScience = await updateMarks("ComputerScience");
  const Chemistry = await updateMarks("Chemistry");
  const Physics = await updateMarks("Physics");

  const marks = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
  const total = marks.reduce((sum, mark) => sum + mark, 0);
  const average = total / marks.length;
  const grade = averageCalculate(average);

  students[index] = {
    name: students[index].name,
    marks: { Tamil, English, Maths, ComputerScience, Chemistry, Physics },
    total,
    average: average.toFixed(2),
    grade,
  };

  await saveStudents(students);
  console.log("\n‚úÖ Student updated successfully!");
}

async function deleteStudent() {
  const students = await loadStudents();
  if (students.length === 0) {
    console.log("\n‚ö†Ô∏è No data found!");
    return;
  }

  const name = await getInput<string>("Enter the student name to delete: ", (input) => input);
  const filtered = students.filter((s) => s.name.toLowerCase() !== name.toLowerCase());

  if (filtered.length === students.length) {
    console.log("\n‚ùå Student not found!");
    return;
  }

  await saveStudents(filtered);
  console.log("\nüóëÔ∏è Student deleted successfully!");
}

// ---------- Main Menu ----------
async function menu() {
  while (true) {
    console.log("\n===== Student Grade Manager =====");
    console.log("1. Input Marks");
    console.log("2. Show Data");
    console.log("3. Update Data");
    console.log("4. Delete Data");
    console.log("5. Exit");

    const choice = await getInput<number>("Enter your choice: ", Number);

    switch (choice) {
      case 1: await addStudent(); break;
      case 2: await showStudents(); break;
      case 3: await updateStudent(); break;
      case 4: await deleteStudent(); break;
      case 5: console.log("\nüëã Exiting..."); return;
      default: console.log("\n‚ùå Invalid choice, try again!");
    }
  }
}

menu();
