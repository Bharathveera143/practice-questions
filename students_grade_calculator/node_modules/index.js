"use strict";
// import * as fs from "fs/promises";
// import * as readline from "readline";
// import * as path from "path";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// const filePath = path.join(
//   "D:/Learnings/JavaScript and Node JS and Ts/Practice/students_grade_calculator/db",
//   "tasks.json"
// );
// function getInput<T>(question: string, parser: (input: string) => T): Promise<T> {
//   const rl = readline.createInterface({
//     input: process.stdin,
//     output: process.stdout,
//   });
//   return new Promise<T>((resolve) => {
//     rl.question(question, (answer) => {
//       rl.close();
//       resolve(parser(answer));
//     });
//   });
// }
// function averageCalculate(average: number): string {
//   if (average >= 90) return "Grade O";
//   else if (average >= 80) return "Grade A+";
//   else if (average >= 70) return "Grade A";
//   else if (average >= 60) return "Grade B+";
//   else if (average >= 50) return "Grade B";
//   else if (average >= 45) return "Grade C";
//   else return "Result Fail";
// }
// async function main() {
//   const name = await getInput<string>("Enter Your Name: ", (input) => input);
//   const Tamil = await getInput<number>("Enter Tamil Marks: ", Number);
//   const English = await getInput<number>("Enter English Marks: ", Number);
//   const Maths = await getInput<number>("Enter Maths Marks: ", Number);
//   const ComputerScience = await getInput<number>("Enter ComputerScience Marks: ", Number);
//   const Chemistry = await getInput<number>("Enter Chemistry Marks: ", Number);
//   const Physics = await getInput<number>("Enter Physics Marks: ", Number);
//   const marks: number[] = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
//   const total = marks.reduce((sum, mark) => sum + mark, 0);
//   const average = total / marks.length;
//   const grade = averageCalculate(average);
//   const studentData = {
//     name,
//     marks: { Tamil, English, Maths, ComputerScience, Chemistry, Physics },
//     total,
//     average: average.toFixed(2),
//     grade,
//   };
//   let tasks: any[] = [];
//   try {
//     const fileContent = await fs.readFile(filePath, "utf-8");
//     tasks = JSON.parse(fileContent);
//   } catch {
//     // File may not exist yet → start with empty array
//     tasks = [];
//   }
//   tasks.push(studentData);
//   await fs.writeFile(filePath, JSON.stringify(tasks, null, 2));
//   console.log("\n✅ Student data saved successfully:");
//   console.log(studentData);
// }
// main();
var fs = require("fs/promises");
var readline = require("readline");
var path = require("path");
var filePath = path.join("D:/Learnings/JavaScript and Node JS and Ts/Practice/students_grade_calculator/db", "tasks.json");
// ---------- Utility Functions ----------
function getInput(question, parser) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(function (resolve) {
        rl.question(question, function (answer) {
            rl.close();
            resolve(parser(answer));
        });
    });
}
function averageCalculate(average) {
    if (average >= 90)
        return "Grade O";
    else if (average >= 80)
        return "Grade A+";
    else if (average >= 70)
        return "Grade A";
    else if (average >= 60)
        return "Grade B+";
    else if (average >= 50)
        return "Grade B";
    else if (average >= 45)
        return "Grade C";
    else
        return "Result Fail";
}
function loadStudents() {
    return __awaiter(this, void 0, void 0, function () {
        var data, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs.readFile(filePath, "utf-8")];
                case 1:
                    data = _b.sent();
                    return [2 /*return*/, JSON.parse(data)];
                case 2:
                    _a = _b.sent();
                    return [2 /*return*/, []];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function saveStudents(students) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs.writeFile(filePath, JSON.stringify(students, null, 2))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
// ---------- Features ----------
function addStudent() {
    return __awaiter(this, void 0, void 0, function () {
        var name, Tamil, English, Maths, ComputerScience, Chemistry, Physics, marks, total, average, grade, student, students;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getInput("Enter Your Name: ", function (input) { return input; })];
                case 1:
                    name = _a.sent();
                    return [4 /*yield*/, getInput("Enter Tamil Marks: ", Number)];
                case 2:
                    Tamil = _a.sent();
                    return [4 /*yield*/, getInput("Enter English Marks: ", Number)];
                case 3:
                    English = _a.sent();
                    return [4 /*yield*/, getInput("Enter Maths Marks: ", Number)];
                case 4:
                    Maths = _a.sent();
                    return [4 /*yield*/, getInput("Enter ComputerScience Marks: ", Number)];
                case 5:
                    ComputerScience = _a.sent();
                    return [4 /*yield*/, getInput("Enter Chemistry Marks: ", Number)];
                case 6:
                    Chemistry = _a.sent();
                    return [4 /*yield*/, getInput("Enter Physics Marks: ", Number)];
                case 7:
                    Physics = _a.sent();
                    marks = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
                    total = marks.reduce(function (sum, mark) { return sum + mark; }, 0);
                    average = total / marks.length;
                    grade = averageCalculate(average);
                    student = {
                        name: name,
                        marks: { Tamil: Tamil, English: English, Maths: Maths, ComputerScience: ComputerScience, Chemistry: Chemistry, Physics: Physics },
                        total: total,
                        average: average.toFixed(2),
                        grade: grade,
                    };
                    return [4 /*yield*/, loadStudents()];
                case 8:
                    students = _a.sent();
                    students.push(student);
                    return [4 /*yield*/, saveStudents(students)];
                case 9:
                    _a.sent();
                    console.log("\n✅ Student data saved successfully:", student);
                    return [2 /*return*/];
            }
        });
    });
}
function showStudents() {
    return __awaiter(this, void 0, void 0, function () {
        var students;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadStudents()];
                case 1:
                    students = _a.sent();
                    console.log("\n📖 All Students Data:\n", JSON.stringify(students, null, 2));
                    return [2 /*return*/];
            }
        });
    });
}
function updateStudent() {
    return __awaiter(this, void 0, void 0, function () {
        var students, name, index, updateMarks, Tamil, English, Maths, ComputerScience, Chemistry, Physics, marks, total, average, grade;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadStudents()];
                case 1:
                    students = _a.sent();
                    if (students.length === 0) {
                        console.log("\n⚠️ No data found!");
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, getInput("Enter the student name to update: ", function (input) { return input; })];
                case 2:
                    name = _a.sent();
                    index = students.findIndex(function (s) { return s.name.toLowerCase() === name.toLowerCase(); });
                    if (index === -1) {
                        console.log("\n❌ Student not found!");
                        return [2 /*return*/];
                    }
                    console.log("\nEnter new marks (leave blank to keep old value):");
                    updateMarks = function (subject) { return __awaiter(_this, void 0, void 0, function () {
                        var input;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, getInput("".concat(subject, " (").concat(students[index].marks[subject], "): "), function (x) { return x; })];
                                case 1:
                                    input = _a.sent();
                                    return [2 /*return*/, input.trim() === "" ? students[index].marks[subject] : Number(input)];
                            }
                        });
                    }); };
                    return [4 /*yield*/, updateMarks("Tamil")];
                case 3:
                    Tamil = _a.sent();
                    return [4 /*yield*/, updateMarks("English")];
                case 4:
                    English = _a.sent();
                    return [4 /*yield*/, updateMarks("Maths")];
                case 5:
                    Maths = _a.sent();
                    return [4 /*yield*/, updateMarks("ComputerScience")];
                case 6:
                    ComputerScience = _a.sent();
                    return [4 /*yield*/, updateMarks("Chemistry")];
                case 7:
                    Chemistry = _a.sent();
                    return [4 /*yield*/, updateMarks("Physics")];
                case 8:
                    Physics = _a.sent();
                    marks = [Tamil, English, Maths, ComputerScience, Chemistry, Physics];
                    total = marks.reduce(function (sum, mark) { return sum + mark; }, 0);
                    average = total / marks.length;
                    grade = averageCalculate(average);
                    students[index] = {
                        name: students[index].name,
                        marks: { Tamil: Tamil, English: English, Maths: Maths, ComputerScience: ComputerScience, Chemistry: Chemistry, Physics: Physics },
                        total: total,
                        average: average.toFixed(2),
                        grade: grade,
                    };
                    return [4 /*yield*/, saveStudents(students)];
                case 9:
                    _a.sent();
                    console.log("\n✅ Student updated successfully!");
                    return [2 /*return*/];
            }
        });
    });
}
function deleteStudent() {
    return __awaiter(this, void 0, void 0, function () {
        var students, name, filtered;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadStudents()];
                case 1:
                    students = _a.sent();
                    if (students.length === 0) {
                        console.log("\n⚠️ No data found!");
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, getInput("Enter the student name to delete: ", function (input) { return input; })];
                case 2:
                    name = _a.sent();
                    filtered = students.filter(function (s) { return s.name.toLowerCase() !== name.toLowerCase(); });
                    if (filtered.length === students.length) {
                        console.log("\n❌ Student not found!");
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, saveStudents(filtered)];
                case 3:
                    _a.sent();
                    console.log("\n🗑️ Student deleted successfully!");
                    return [2 /*return*/];
            }
        });
    });
}
// ---------- Main Menu ----------
function menu() {
    return __awaiter(this, void 0, void 0, function () {
        var choice, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!true) return [3 /*break*/, 13];
                    console.log("\n===== Student Grade Manager =====");
                    console.log("1. Input Marks");
                    console.log("2. Show Data");
                    console.log("3. Update Data");
                    console.log("4. Delete Data");
                    console.log("5. Exit");
                    return [4 /*yield*/, getInput("Enter your choice: ", Number)];
                case 1:
                    choice = _b.sent();
                    _a = choice;
                    switch (_a) {
                        case 1: return [3 /*break*/, 2];
                        case 2: return [3 /*break*/, 4];
                        case 3: return [3 /*break*/, 6];
                        case 4: return [3 /*break*/, 8];
                        case 5: return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 11];
                case 2: return [4 /*yield*/, addStudent()];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 12];
                case 4: return [4 /*yield*/, showStudents()];
                case 5:
                    _b.sent();
                    return [3 /*break*/, 12];
                case 6: return [4 /*yield*/, updateStudent()];
                case 7:
                    _b.sent();
                    return [3 /*break*/, 12];
                case 8: return [4 /*yield*/, deleteStudent()];
                case 9:
                    _b.sent();
                    return [3 /*break*/, 12];
                case 10:
                    console.log("\n👋 Exiting...");
                    return [2 /*return*/];
                case 11:
                    console.log("\n❌ Invalid choice, try again!");
                    _b.label = 12;
                case 12: return [3 /*break*/, 0];
                case 13: return [2 /*return*/];
            }
        });
    });
}
menu();
