import * as fs from 'fs/promises';
import * as path from 'path';
import * as readline from 'readline'


const filePath = path.join("D:\\Learnings\\JavaScript and Node JS and Ts\\Practice\\weather-app\\data",'weather.json');

interface weatherData{
    city:string;
    temperature:number;
    date:string;
}

function getWeather(city:string):Promise<weatherData>{
    return new Promise((resolve)=>{
        setTimeout(()=>{
            const temp:number = Math.floor(Math.random()*40) - 5;
            const date:string = new Date().toLocaleDateString();
            resolve({city,temperature:temp,date})
        },1000)
    })
}

function askQuestion(query:string):Promise<string>{
    const rl = readline.createInterface({
        input:process.stdin,
        output:process.stdout,
    });

    return new Promise((resolve)=>{
        rl.question(query,(answer)=>{
            rl.close();
            resolve(answer);
        })
    })
}

async function saveWeather(data: weatherData): Promise<void> {
  try {
    let existing: weatherData[] = [];

    try {
      const fileData = await fs.readFile(filePath, "utf-8");
      existing = JSON.parse(fileData);
    } catch {
      existing = []; // if file not found or invalid JSON
    }

    existing.push(data);

    await fs.writeFile(filePath, JSON.stringify(existing, null, 2), "utf-8");
    console.log("‚úÖ Weather data saved to weather.json");

  } catch (error) {
    console.error("‚ùå Error saving file:", error);
  }
}

async function showSaved(): Promise<void> {
  try {
    const fileData = await fs.readFile(filePath, "utf-8");
    const saved: weatherData[] = JSON.parse(fileData);

    if (saved.length === 0) {
      console.log("üìÇ No saved weather data found.");
    } else {
      console.log("\nüìú Saved Weather Data:");
      saved.forEach((item, index) => {
        console.log(
          `${index + 1}. ${item.city} | ${item.date} | ${item.temperature}¬∞C`
        );
        console.table(saved);
      });
    }
  } catch {
    console.log("üìÇ No saved weather data file found.");
  }
}

async function deleteData():Promise<void>{
    try{
        await fs.writeFile(filePath,"[]",'utf-8');
        console.log("üóëÔ∏è All saved weather data deleted.");
        
    }
    catch(error){
        console.log("‚ùå Error deleting data:", error);
        
    }
}

// async function showWeather():Promise<void> {
//    const city = await askQuestion ("Enter city name : ");
//    const data :weatherData = await getWeather(city);
//     console.log(`Weather in ${data.city} on ${data.date}: ${data.temperature}¬∞C`);
//     await saveWeather(data);
    
// }


async function mainMenu():Promise<void>{
    let exit = false;

    while(!exit){
        console.log("\n --- Weather Checking --- ");
        console.log("1. Get Random Temperature For A City");
        console.log("2. Showed Saved Data");
        console.log("3. Delete All Saved Data");
        console.log("4.Exit \n");        
        
        const choice = await askQuestion("Enter option(1-4) : ")
        
        if(choice === "1"){
            const city = await askQuestion("Enter a city name : ");
            const data:weatherData = await getWeather(city);
            console.log(`üå§Ô∏è Weather in ${data.city} on ${data.date}: ${data.temperature}¬∞C`);
            await saveWeather(data);   
        }

        else if(choice === "2"){
            await showSaved();
        }

        else if(choice === "3"){
           await deleteData()
        }

        else if(choice === "4"){
            console.log("üëã Exiting... Goodbye!");
            exit = true;
        }
        else{
            console.log("‚ùå Invalid option. Please choose 1-4.");
            
        }
    }

}

mainMenu();