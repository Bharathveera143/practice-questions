"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs/promises");
var path = require("path");
var readline = require("readline");
var filePath = path.join("D:\\Learnings\\JavaScript and Node JS and Ts\\Practice\\weather-app\\data", 'weather.json');
function getWeather(city) {
    return new Promise(function (resolve) {
        setTimeout(function () {
            var temp = Math.floor(Math.random() * 40) - 5;
            var date = new Date().toLocaleDateString();
            resolve({ city: city, temperature: temp, date: date });
        }, 1000);
    });
}
function askQuestion(query) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(function (resolve) {
        rl.question(query, function (answer) {
            rl.close();
            resolve(answer);
        });
    });
}
function saveWeather(data) {
    return __awaiter(this, void 0, void 0, function () {
        var existing, fileData, _a, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, , 7]);
                    existing = [];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fs.readFile(filePath, "utf-8")];
                case 2:
                    fileData = _b.sent();
                    existing = JSON.parse(fileData);
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    existing = []; // if file not found or invalid JSON
                    return [3 /*break*/, 4];
                case 4:
                    existing.push(data);
                    return [4 /*yield*/, fs.writeFile(filePath, JSON.stringify(existing, null, 2), "utf-8")];
                case 5:
                    _b.sent();
                    console.log("‚úÖ Weather data saved to weather.json");
                    return [3 /*break*/, 7];
                case 6:
                    error_1 = _b.sent();
                    console.error("‚ùå Error saving file:", error_1);
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function showSaved() {
    return __awaiter(this, void 0, void 0, function () {
        var fileData, saved_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs.readFile(filePath, "utf-8")];
                case 1:
                    fileData = _b.sent();
                    saved_1 = JSON.parse(fileData);
                    if (saved_1.length === 0) {
                        console.log("üìÇ No saved weather data found.");
                    }
                    else {
                        console.log("\nüìú Saved Weather Data:");
                        saved_1.forEach(function (item, index) {
                            console.log("".concat(index + 1, ". ").concat(item.city, " | ").concat(item.date, " | ").concat(item.temperature, "\u00B0C"));
                            console.table(saved_1);
                        });
                    }
                    return [3 /*break*/, 3];
                case 2:
                    _a = _b.sent();
                    console.log("üìÇ No saved weather data file found.");
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function deleteData() {
    return __awaiter(this, void 0, void 0, function () {
        var error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs.writeFile(filePath, "[]", 'utf-8')];
                case 1:
                    _a.sent();
                    console.log("üóëÔ∏è All saved weather data deleted.");
                    return [3 /*break*/, 3];
                case 2:
                    error_2 = _a.sent();
                    console.log("‚ùå Error deleting data:", error_2);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
// async function showWeather():Promise<void> {
//    const city = await askQuestion ("Enter city name : ");
//    const data :weatherData = await getWeather(city);
//     console.log(`Weather in ${data.city} on ${data.date}: ${data.temperature}¬∞C`);
//     await saveWeather(data);
// }
function mainMenu() {
    return __awaiter(this, void 0, void 0, function () {
        var exit, choice, city, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    exit = false;
                    _a.label = 1;
                case 1:
                    if (!!exit) return [3 /*break*/, 12];
                    console.log("\n --- Weather Checking --- ");
                    console.log("1. Get Random Temperature For A City");
                    console.log("2. Showed Saved Data");
                    console.log("3. Delete All Saved Data");
                    console.log("4.Exit \n");
                    return [4 /*yield*/, askQuestion("Enter option(1-4) : ")];
                case 2:
                    choice = _a.sent();
                    if (!(choice === "1")) return [3 /*break*/, 6];
                    return [4 /*yield*/, askQuestion("Enter a city name : ")];
                case 3:
                    city = _a.sent();
                    return [4 /*yield*/, getWeather(city)];
                case 4:
                    data = _a.sent();
                    console.log("\uD83C\uDF24\uFE0F Weather in ".concat(data.city, " on ").concat(data.date, ": ").concat(data.temperature, "\u00B0C"));
                    return [4 /*yield*/, saveWeather(data)];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 11];
                case 6:
                    if (!(choice === "2")) return [3 /*break*/, 8];
                    return [4 /*yield*/, showSaved()];
                case 7:
                    _a.sent();
                    return [3 /*break*/, 11];
                case 8:
                    if (!(choice === "3")) return [3 /*break*/, 10];
                    return [4 /*yield*/, deleteData()];
                case 9:
                    _a.sent();
                    return [3 /*break*/, 11];
                case 10:
                    if (choice === "4") {
                        console.log("üëã Exiting... Goodbye!");
                        exit = true;
                    }
                    else {
                        console.log("‚ùå Invalid option. Please choose 1-4.");
                    }
                    _a.label = 11;
                case 11: return [3 /*break*/, 1];
                case 12: return [2 /*return*/];
            }
        });
    });
}
mainMenu();
